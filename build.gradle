buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = "2.0." + "${System.getenv().BUILD_NUMBER}"
} else {
    version = "2.0.BUILD"
}

minecraft {
    version = "1.8-11.14.0.1281-1.8"
    replace "@MODVERSION@", project.version
    replaceIn "Core.java"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_nodoc_20141130"
}

group = 'ModmussCore'

task deleteOldArtifacts(type: Delete) {
    delete 'build/libs'
}

classes.dependsOn deleteOldArtifacts


processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include '*.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude '**/*.info'
            }
        }

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'src'
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'dev'
    exclude "**/*.psd"
    classifier = 'dev'
}

jar {
    manifest {
        attributes (['FMLCorePlugin': 'me.modmuss50.network.FmlLoadingCore', 'FMLCorePluginContainsFMLMod': 'true'])
    }
    exclude "**/*.psd"
    appendix = 'universal'
    classifier = 'universal'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///var/www/maven/")
            pom {
                groupId = "ModmussCore"
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'ModmussCore'
                    url 'https://github.com/modmuss50/ModmussCore'
                    scm {
                        url 'https://github.com/modmuss50/ModmussCore'
                        connection 'scm:git:git@github.com:modmuss50/ModmussCore.git'
                        developerConnection 'scm:git:git@github.com:modmuss50/ModmussCore.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/modmuss50/ModmussCore/issues'
                    }
                    licenses {
                        license {
                            name 'License'
                            url 'https://github.com/modmuss50/ModmussCore/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'modmuss50'
                            name 'modmuss50'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}

sourceSets { main { output.resourcesDir = output.classesDir } }